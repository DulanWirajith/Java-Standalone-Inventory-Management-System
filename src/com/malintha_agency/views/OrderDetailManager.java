/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.malintha_agency.views;

import com.malintha_agency.controller.InvoiceController;
import com.malintha_agency.controller.OrderController;
import com.malintha_agency.controller.OrderDetailController;
import com.malintha_agency.controller.OrderPaymentController;
import com.malintha_agency.controller.ProductController;
import com.malintha_agency.controller.ShopController;
import com.malintha_agency.controller.SupplierController;
import com.malintha_agency.model.Invoice;
import com.malintha_agency.model.OrderDTO;
import com.malintha_agency.model.Order_Detail;
import com.malintha_agency.model.PaymentDTO;
import com.malintha_agency.model.Products;
import com.malintha_agency.model.Shop;
import com.malintha_agency.model.Supplier;
import com.malintha_agency.view.validation.Validation;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.swing.JRViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author ZeeLot
 */
public class OrderDetailManager extends javax.swing.JPanel {

    private static OrderDetailManager orderDetailManager;
    private DefaultTableModel mdlOrderDeatils;
    private int loadShopsCount;
    private int loadInvoicesCount;
    private int loadProductsCount;
    private Products productIdByName;
    private String orderDetailType = "0";
    private int loadSupplierCount;
    private JasperReport jasperReport;
    private JasperPrint filledReport;
    private JRViewer jRViewer;

    /**
     * Creates new form OrderDetailManager
     */
    public OrderDetailManager() {
        initComponents();
//        setSize(810, 533);
        mdlOrderDeatils = (DefaultTableModel) tblOrderDetails.getModel();
        tblOrderDetails.removeColumn(tblOrderDetails.getColumnModel().getColumn(5));
        setDate();
        loadJasper();
        AutoCompleteDecorator.decorate(cmbShops);
        AutoCompleteDecorator.decorate(cmbInvoices);
        AutoCompleteDecorator.decorate(cmbOrderDetailType);
        AutoCompleteDecorator.decorate(cmbProducts);
        AutoCompleteDecorator.decorate(cmbSupplier);
    }

    public static OrderDetailManager getInstance() {
        if (orderDetailManager == null) {
            orderDetailManager = new OrderDetailManager();
        }
        return orderDetailManager;
    }

    public void updateData() {
        loadShops();
        setOrderId();
        loadSuppliers();
        loadInvoiceNumbers();
        loadProducts();
        getProductId();
        setOrderDetailIdAndProductDetails();
        loadOrderDetailsViaOrderId();
    }

    private void loadJasper() {
        try {
            jasperReport = (JasperReport) JRLoader.loadObject(OrderDetailManager.class.getResourceAsStream("/com/malintha_agency/jasper/OrderDetail.jasper"));
        } catch (JRException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbShops = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        cldDate = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        lblOrderDetailId = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbInvoices = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        lblPriceBuying = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbProducts = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lblProductId = new javax.swing.JLabel();
        lblPayment = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblDuePayment = new javax.swing.JLabel();
        lblQty = new javax.swing.JLabel();
        cmbOrderDetailType = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblPriceSelling = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        txtDiscount = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        btnRemoveOrder = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderDetails = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox<>();
        spnQty = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        chkDiscount = new javax.swing.JCheckBox();
        btnReport = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(78, 44, 211));
        jPanel1.setForeground(new java.awt.Color(78, 44, 211));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setText("Shop");

        cmbShops.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbShops.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShopsItemStateChanged(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 204, 255));
        jLabel13.setText("Date");

        cldDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cldDatePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbShops, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbShops, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cldDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Order Detail ID");

        lblOrderDetailId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblOrderDetailId.setForeground(new java.awt.Color(51, 51, 51));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Supplier");

        cmbInvoices.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbInvoices.setForeground(new java.awt.Color(51, 51, 51));
        cmbInvoices.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInvoicesItemStateChanged(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Price (Buying)");

        lblPriceBuying.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPriceBuying.setForeground(new java.awt.Color(51, 51, 51));
        lblPriceBuying.setText("0.0");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Product Name");

        cmbProducts.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbProducts.setForeground(new java.awt.Color(51, 51, 51));
        cmbProducts.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductsItemStateChanged(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Total Payment");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Product ID");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("Due Payment");

        lblProductId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblProductId.setForeground(new java.awt.Color(51, 51, 51));

        lblPayment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPayment.setForeground(new java.awt.Color(51, 51, 51));
        lblPayment.setText("0.0");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Qty");

        lblDuePayment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDuePayment.setForeground(new java.awt.Color(51, 51, 51));
        lblDuePayment.setText("0.0");

        lblQty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblQty.setForeground(new java.awt.Color(51, 51, 51));
        lblQty.setText("0");

        cmbOrderDetailType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbOrderDetailType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "One", "Extra" }));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Price (Selling)");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Special Discount");

        lblPriceSelling.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPriceSelling.setForeground(new java.awt.Color(51, 51, 51));
        lblPriceSelling.setText("0.0");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Qty");

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        txtDiscount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(51, 51, 51));
        txtDiscount.setText("0.0");
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("Order ID");

        lblOrderId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblOrderId.setForeground(new java.awt.Color(51, 51, 51));

        btnRemoveOrder.setText("Remove Order");
        btnRemoveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderActionPerformed(evt);
            }
        });

        tblOrderDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Unit Price", "Discount", "Qty", "Total", "Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOrderDetails);
        if (tblOrderDetails.getColumnModel().getColumnCount() > 0) {
            tblOrderDetails.getColumnModel().getColumn(0).setResizable(false);
            tblOrderDetails.getColumnModel().getColumn(1).setResizable(false);
            tblOrderDetails.getColumnModel().getColumn(2).setResizable(false);
            tblOrderDetails.getColumnModel().getColumn(3).setResizable(false);
            tblOrderDetails.getColumnModel().getColumn(4).setResizable(false);
            tblOrderDetails.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("Invoice");

        cmbSupplier.setForeground(new java.awt.Color(51, 51, 51));
        cmbSupplier.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSupplierItemStateChanged(evt);
            }
        });

        spnQty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        spnQty.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spnQtyKeyReleased(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Discount");

        btnReport.setText("View Order Report");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnQty, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(26, 26, 26)
                                .addComponent(lblPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(102, 102, 102)
                                .addComponent(btnReport, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRemoveOrder))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(32, 32, 32)
                                        .addComponent(lblDuePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbInvoices, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(81, 81, 81)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrderDetailId, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cmbOrderDetailType, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel7)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblQty, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblPriceSelling, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblPriceBuying, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 20, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(lblOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14)
                            .addComponent(lblOrderDetailId, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbOrderDetailType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbInvoices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(lblProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(lblQty, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(lblPriceSelling, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(lblPriceBuying, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16)
                                .addComponent(lblDuePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(spnQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel19)
                                .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1)
                                .addComponent(btnRemove)
                                .addComponent(btnRemoveOrder)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chkDiscount)
                            .addComponent(jLabel8)
                            .addComponent(btnReport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbShopsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShopsItemStateChanged
        if (loadShopsCount > 0) {
            setOrderId();
            setOrderDetailIdAndProductDetails();
            loadOrderDetailsViaOrderId();
        }
    }//GEN-LAST:event_cmbShopsItemStateChanged

    private void cldDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cldDatePropertyChange
        if (loadShopsCount > 0) {
            setOrderId();
            setOrderDetailIdAndProductDetails();
            loadOrderDetailsViaOrderId();
        }
    }//GEN-LAST:event_cldDatePropertyChange

    private void cmbInvoicesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInvoicesItemStateChanged
        if (loadInvoicesCount > 0) {
            loadProducts();
            getProductId();
            setOrderDetailIdAndProductDetails();
        }
    }//GEN-LAST:event_cmbInvoicesItemStateChanged

    private void cmbProductsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductsItemStateChanged
        if (loadProductsCount > 0) {
            getProductId();
            setOrderDetailIdAndProductDetails();
        }
    }//GEN-LAST:event_cmbProductsItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (isNotBlank()) {
            if (Integer.parseInt(lblQty.getText()) >= Integer.parseInt(spnQty.getValue().toString())) {
                int count = 0;
                if (cmbOrderDetailType.getSelectedItem().toString().equals("One")) {
                    orderDetailType = "0";
                } else {
                    orderDetailType = "1";
                }
                for (int i = 0; i <= tblOrderDetails.getRowCount() - 1; i++) {
                    if (tblOrderDetails.getModel().getValueAt(i, 5).equals(lblOrderDetailId.getText() + orderDetailType)) {
                        try {
                            count++;
                            if (chkDiscount.isSelected()) {
                                txtDiscount.setText((Double.parseDouble(lblPriceSelling.getText()) * Integer.parseInt(spnQty.getValue().toString())) + "");
                            } else {
//                                txtDiscount.setText("0.0");
                            }
                            double total = (Double.parseDouble(lblPriceSelling.getText()) * Integer.parseInt(spnQty.getValue().toString())) - Double.parseDouble(txtDiscount.getText());
                            Order_Detail order_Detail = new Order_Detail();
                            order_Detail.setOrder_detailid(lblOrderDetailId.getText() + orderDetailType);
                            order_Detail.setOid(lblOrderId.getText());
                            String text = lblProductId.getText().trim();
                            String proId = text.substring(1, text.length());
                            order_Detail.setOid(lblOrderId.getText());
                            order_Detail.setProdid(Integer.parseInt(proId));
                            order_Detail.setDiscount(Double.parseDouble(txtDiscount.getText()));
                            order_Detail.setQty(Integer.parseInt(tblOrderDetails.getValueAt(i, 3).toString()));
                            order_Detail.setPayment(total);
                            order_Detail.setProdid(Integer.parseInt(proId));
                            boolean removeOrder = OrderDetailController.deleteOrderDetail(order_Detail);
                            order_Detail.setQty(Integer.parseInt(spnQty.getValue().toString()));
                            boolean addOrderDetail = OrderDetailController.addOrderDetail(order_Detail);
                            if (addOrderDetail && removeOrder) {
                                loadOrderDetailsViaOrderId();
                                getProductId();
                                setOrderDetailIdAndProductDetails();
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                if (count == 0) {
                    if (chkDiscount.isSelected()) {
                        txtDiscount.setText((Double.parseDouble(lblPriceSelling.getText()) * Integer.parseInt(spnQty.getValue().toString())) + "");
                    } else {
//                        txtDiscount.setText("0.0");
                    }
                    double total = (Double.parseDouble(lblPriceSelling.getText()) * Integer.parseInt(spnQty.getValue().toString())) - Double.parseDouble(txtDiscount.getText());
                    Object[] ob = {cmbProducts.getSelectedItem(), Double.parseDouble(lblPriceSelling.getText()), Double.parseDouble(txtDiscount.getText()), Integer.parseInt(spnQty.getValue().toString()), total, lblOrderDetailId.getText() + orderDetailType};
                    mdlOrderDeatils.addRow(ob);
                    if (tblOrderDetails.getRowCount() == 1) {
                        try {
                            OrderDTO orderDTO = new OrderDTO();
                            Order_Detail order_Detail = new Order_Detail();
                            orderDTO.setOrderid(lblOrderId.getText());
                            orderDTO.setSID(ShopController.getShopIdByName(cmbShops.getSelectedItem().toString()).getShopid());
                            orderDTO.setDate(new SimpleDateFormat("yyyy-MM-dd").format(cldDate.getDate()));
                            order_Detail.setOrder_detailid(lblOrderDetailId.getText() + orderDetailType);
                            String text = lblProductId.getText().trim();
                            String proId = text.substring(1, text.length());
                            order_Detail.setOid(lblOrderId.getText());
                            order_Detail.setProdid(Integer.parseInt(proId));
                            order_Detail.setDiscount(Double.parseDouble(txtDiscount.getText()));
                            order_Detail.setQty(Integer.parseInt(spnQty.getValue().toString()));
                            order_Detail.setPayment(total);
                            orderDTO.setOrder_Detail(order_Detail);
                            boolean addOrderDetailWithOrder = OrderDetailController.addOrderDetailWithOrder(orderDTO);
                            if (addOrderDetailWithOrder) {
                                loadOrderPayment();
                                getProductId();
                                setOrderDetailIdAndProductDetails();
                            }
                        } catch (SQLException ex) {
                            if (ex.getErrorCode() == 1062) {

                            } else {
                                Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        try {
                            Order_Detail order_Detail = new Order_Detail();
                            order_Detail.setOrder_detailid(lblOrderDetailId.getText() + orderDetailType);
                            order_Detail.setOid(lblOrderId.getText());
                            String text = lblProductId.getText().trim();
                            String proId = text.substring(1, text.length());
                            order_Detail.setOid(lblOrderId.getText());
                            order_Detail.setProdid(Integer.parseInt(proId));
                            order_Detail.setDiscount(Double.parseDouble(txtDiscount.getText()));
                            order_Detail.setQty(Integer.parseInt(spnQty.getValue().toString()));
                            order_Detail.setPayment(total);
                            order_Detail.setProdid(Integer.parseInt(proId));
                            boolean addOrderDetail = OrderDetailController.addOrderDetail(order_Detail);
                            if (addOrderDetail) {
                                loadOrderPayment();
                                getProductId();
                                setOrderDetailIdAndProductDetails();
                            }
                        } catch (SQLException ex) {
                            if (ex.getErrorCode() == 1062) {

                            } else {
                                Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                calculateTotal();
            } else {
                JOptionPane.showMessageDialog(this, "Quantity has been exceeded");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (tblOrderDetails.getRowCount() == 1) {
            try {
                OrderDTO orderDTO = new OrderDTO();
                orderDTO.setOrderid(lblOrderId.getText());
                ArrayList<Order_Detail> order_Details = new ArrayList<>();
                for (int i = 0; i < tblOrderDetails.getRowCount(); i++) {
                    Order_Detail order_Detail = new Order_Detail();
                    order_Detail.setProdid(ProductController.getProductIdViaOrderDetailId(tblOrderDetails.getModel().getValueAt(i, 5).toString()).getPid());
                    order_Detail.setOrder_detailid(tblOrderDetails.getModel().getValueAt(i, 5).toString());
                    order_Detail.setQty(Integer.parseInt(tblOrderDetails.getValueAt(i, 3).toString()));
                    order_Details.add(order_Detail);
                }
                orderDTO.setOrder_Details(order_Details);
                boolean removeOrder = OrderController.removeOrder(orderDTO);
                if (removeOrder) {
                    loadOrderDetailsViaOrderId();
                    getProductId();
                    setOrderDetailIdAndProductDetails();
                }
            } catch (SQLException ex) {
                Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (tblOrderDetails.getSelectedRow() > -1) {
                try {
                    String text = lblProductId.getText().trim();
                    String proId = text.substring(1, text.length());
                    Order_Detail order_Detail = new Order_Detail();
                    order_Detail.setProdid(Integer.parseInt(proId));
                    order_Detail.setOrder_detailid(tblOrderDetails.getModel().getValueAt(tblOrderDetails.getSelectedRow(), 5).toString());
                    order_Detail.setQty(Integer.parseInt(tblOrderDetails.getValueAt(tblOrderDetails.getSelectedRow(), 3).toString()));
                    boolean removeOrder = OrderDetailController.deleteOrderDetail(order_Detail);
                    if (removeOrder) {
                        loadOrderDetailsViaOrderId();
                        getProductId();
                        setOrderDetailIdAndProductDetails();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRemoveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderActionPerformed
        try {
            OrderDTO orderDTO = new OrderDTO();
            orderDTO.setOrderid(lblOrderId.getText());
            ArrayList<Order_Detail> order_Details = new ArrayList<>();
            for (int i = 0; i < tblOrderDetails.getRowCount(); i++) {
                Order_Detail order_Detail = new Order_Detail();
                order_Detail.setProdid(ProductController.getProductIdViaOrderDetailId(tblOrderDetails.getModel().getValueAt(i, 5).toString()).getPid());
                order_Detail.setOrder_detailid(tblOrderDetails.getModel().getValueAt(i, 5).toString());
                order_Detail.setQty(Integer.parseInt(tblOrderDetails.getValueAt(i, 3).toString()));
                order_Details.add(order_Detail);
            }
            orderDTO.setOrder_Details(order_Details);
            boolean removeOrder = OrderController.removeOrder(orderDTO);
            if (removeOrder) {
                loadOrderDetailsViaOrderId();
                getProductId();
                setOrderDetailIdAndProductDetails();
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoveOrderActionPerformed

    public ArrayList<String> getPaymentData() {
        ArrayList<String> data = new ArrayList<>();
        data.add(lblOrderId.getText());
        data.add(lblPayment.getText());
        data.add(lblDuePayment.getText());
        return data;
    }

    public String getOrderId() {
        return lblOrderId.getText();
    }

    public boolean isTableLoaded() {
        return tblOrderDetails.getRowCount() > 0;
    }

    private void cmbSupplierItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSupplierItemStateChanged
        if (loadSupplierCount > 0) {
            loadInvoiceNumbers();
            loadProducts();
            getProductId();
            setOrderDetailIdAndProductDetails();
        }
    }//GEN-LAST:event_cmbSupplierItemStateChanged

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        try {
            HashMap<String, Object> data = new HashMap<>();
            data.put("Total", lblPayment.getText());
            data.put("Order ID", lblOrderId.getText());
            data.put("Date", new SimpleDateFormat("yyyy-MM-dd").format(cldDate.getDate()));
            data.put("Shop", cmbShops.getSelectedItem().toString());
            filledReport = JasperFillManager.fillReport(jasperReport, data, new JRTableModelDataSource(mdlOrderDeatils));
            jRViewer = new JRViewer(filledReport);
            jRViewer.setOpaque(true);
            jRViewer.setBackground(Color.WHITE);
            new JasperViewer(jRViewer);
            //PrintJasper.PrintReportToPrinter(filledReport);
        } catch (JRException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnReportActionPerformed

    private void spnQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnQtyKeyReleased

    }//GEN-LAST:event_spnQtyKeyReleased

    private void txtDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyReleased
        Validation.priceText(txtDiscount);
    }//GEN-LAST:event_txtDiscountKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveOrder;
    private javax.swing.JButton btnReport;
    private javax.swing.JCheckBox chkDiscount;
    private com.toedter.calendar.JDateChooser cldDate;
    private javax.swing.JComboBox<String> cmbInvoices;
    private javax.swing.JComboBox<String> cmbOrderDetailType;
    private javax.swing.JComboBox<String> cmbProducts;
    private javax.swing.JComboBox<String> cmbShops;
    private javax.swing.JComboBox<String> cmbSupplier;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDuePayment;
    private javax.swing.JLabel lblOrderDetailId;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblPayment;
    private javax.swing.JLabel lblPriceBuying;
    private javax.swing.JLabel lblPriceSelling;
    private javax.swing.JLabel lblProductId;
    private javax.swing.JLabel lblQty;
    private javax.swing.JSpinner spnQty;
    private javax.swing.JTable tblOrderDetails;
    private javax.swing.JTextField txtDiscount;
    // End of variables declaration//GEN-END:variables

    private void loadShops() {
        try {
            loadShopsCount = 0;
            ArrayList<Shop> shopNames = ShopController.getShopNames();
            cmbShops.removeAllItems();
            for (Shop shopName : shopNames) {
                cmbShops.addItem(shopName.getShopname());
            }
            loadShopsCount++;
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setDate() {
        cldDate.setDate(new Date());
    }

    private void setOrderId() {
        try {
            if (cmbShops.getSelectedItem() != null) {
                Shop shopIdByName = ShopController.getShopIdByName(cmbShops.getSelectedItem().toString());
                lblOrderId.setText("OD" + new SimpleDateFormat("yyyyMMdd").format(cldDate.getDate()) + "S" + shopIdByName.getShopid());
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadInvoiceNumbers() {
        try {
            if (cmbSupplier.getSelectedItem() != null) {
                loadInvoicesCount = 0;
                ArrayList<Invoice> invoicesNumbers = InvoiceController.getInvoicesNumbersViaSupplier(SupplierController.getSupplierIdViaName(cmbSupplier.getSelectedItem().toString()).getSupplierid());
                cmbInvoices.removeAllItems();
                for (Invoice invoicesNumber : invoicesNumbers) {
                    cmbInvoices.addItem(invoicesNumber.getInvoiceno());
                }
                loadInvoicesCount++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadProducts() {
        try {
            if (cmbInvoices.getSelectedItem() != null) {
                loadProductsCount = 0;
                ArrayList<Products> productsViaInvoicesNumber = InvoiceController.getProductsViaInvoicesNumber(Integer.parseInt(cmbInvoices.getSelectedItem().toString()));
                cmbProducts.removeAllItems();
                for (Products products : productsViaInvoicesNumber) {
                    cmbProducts.addItem(products.getProductName());
                }
                loadProductsCount++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadSuppliers() {
        try {
            Supplier[] viewSuppliers = SupplierController.viewSuppliers();
            if (viewSuppliers != null) {
                loadSupplierCount = 0;
                cmbSupplier.removeAllItems();
                for (Supplier viewSupplier : viewSuppliers) {
                    cmbSupplier.addItem(viewSupplier.getSuppliername());
                }
                loadSupplierCount++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getProductId() {
        try {
            if (cmbProducts.getSelectedItem() != null) {
                productIdByName = ProductController.getProductDetailsByName(cmbProducts.getSelectedItem().toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setOrderDetailIdAndProductDetails() {
        if (productIdByName != null) {
            lblOrderDetailId.setText(lblOrderId.getText() + "P" + productIdByName.getPid());
            lblProductId.setText("P" + productIdByName.getPid());
            lblPriceBuying.setText(productIdByName.getBuying() + "");
            lblPriceSelling.setText(productIdByName.getSelling() + "");
            lblQty.setText(productIdByName.getQty() + "");
        }
    }

    private void loadOrderDetailsViaOrderId() {
        try {
            ArrayList<Order_Detail> orderDetails = OrderDetailController.getOrderDetails(lblOrderId.getText());
            mdlOrderDeatils.setRowCount(0);
            double total = 0;
            for (Order_Detail orderDetail : orderDetails) {
                if (orderDetail.getQty() == 0) {
                    total = 0;
                } else {
                    total = orderDetail.getPayment() * orderDetail.getQty() - orderDetail.getDiscount();
                }
                Object[] ob = {orderDetail.getProductName(), orderDetail.getPayment(), orderDetail.getDiscount(), orderDetail.getQty(), total, orderDetail.getOrder_detailid()};
                mdlOrderDeatils.addRow(ob);
            }
            loadOrderPayment();
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadOrderPayment() {
        try {
            OrderDTO orderDTO = new OrderDTO();
            orderDTO.setOrderid(lblOrderId.getText());
            PaymentDTO m = OrderPaymentController.getOrderPaidAmount(orderDTO);
            calculateTotal();
            lblDuePayment.setText((Double.parseDouble(lblPayment.getText()) - m.getPayment()) + "");
        } catch (SQLException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderDetailManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Calculate total credits and fee, then set to text fields*/
    private void calculateTotal() {
        double fee = 0;
        for (int i = 0; i < tblOrderDetails.getRowCount(); i++) {
            fee += Double.parseDouble(tblOrderDetails.getValueAt(i, 4).toString());
        }
        lblPayment.setText(fee + "");
    }

    private boolean isNotBlank() {
        return (!txtDiscount.getText().equals("") && !spnQty.getValue().toString().equals(""));
    }

}
